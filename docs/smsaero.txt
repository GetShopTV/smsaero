-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | SMSAero API and HTTP client based on servant library.
--   
--   Please see README.md
@package smsaero
@version 0.1

module SMSAero.Utils

-- | Distribute a client looking like
--   
--   <pre>
--   a -&gt; (b :<a>|</a> ... :<a>|</a> c)
--   </pre>
--   
--   into
--   
--   <pre>
--   (a -&gt; b) :<a>|</a> ...  :<a>|</a> (a -&gt; c)
--   </pre>
--   
--   This is useful to bring authentication credentials to individual
--   client endpoint queries.
class DistributiveClient client client'
distributeClient :: DistributiveClient client client' => client -> client'
instance SMSAero.Utils.DistributiveClient (a -> b) (a -> b)
instance (SMSAero.Utils.DistributiveClient (a -> b) b', SMSAero.Utils.DistributiveClient (a -> c) c') => SMSAero.Utils.DistributiveClient (a -> b Servant.API.Alternative.:<|> c) (b' Servant.API.Alternative.:<|> c')

module SMSAero.API

-- | Content type for SMSAero JSON answer (it has JSON body but
--   "text/plain" Content-Type).
data SmsAeroJson

-- | Like <a>QueryParam</a>, but always required.
data RequiredQueryParam (sym :: Symbol) a

-- | SMSAero sender's signature. This is used for the "from" field.
newtype Signature
Signature :: Text -> Signature
[getSignature] :: Signature -> Text

-- | SMSAero sent message id.
newtype MessageId
MessageId :: Integer -> MessageId

-- | SMSAero authentication data.
data SMSAeroAuth
SMSAeroAuth :: Text -> Text -> SMSAeroAuth

-- | Username.
[authUser] :: SMSAeroAuth -> Text

-- | MD5 hash of a password.
[authPassword] :: SMSAeroAuth -> Text

-- | Phone number.
newtype Phone
Phone :: Integer -> Phone
[getPhone] :: Phone -> Integer

-- | Date.
newtype SMSAeroDate
SMSAeroDate :: UTCTime -> SMSAeroDate
[getSMSAeroDate] :: SMSAeroDate -> UTCTime

-- | SMSAero authentication credentials.
data RequireAuth

-- | Implicit parameter that tells SMSAero to respond with JSON.
data AnswerJson

-- | Regular SMSAero GET API.
type SmsAeroGet a = Get '[SmsAeroJson] (SmsAeroResponse a)

-- | SMSAero API.
type SMSAeroAPI = RequireAuth :> (AnswerJson :> (("send" :> SendApi) :<|> (("status" :> StatusApi) :<|> (("balance" :> SmsAeroGet BalanceResponse) :<|> (("senders" :> SmsAeroGet SendersResponse) :<|> ("sign" :> SmsAeroGet SignResponse))))))

-- | SMSAero API to send a message.
type SendApi = RequiredQueryParam "to" Phone :> (RequiredQueryParam "text" Text :> (RequiredQueryParam "from" Signature :> (QueryParam "date" SMSAeroDate :> SmsAeroGet SendResponse)))

-- | SMSAero API to check message status.
type StatusApi = RequiredQueryParam "id" MessageId :> SmsAeroGet StatusResponse

-- | Every SMSAero response is either rejected or provides some info.
data SmsAeroResponse a

-- | Some useful payload.
ResponseOK :: a -> SmsAeroResponse a

-- | Rejection reason.
ResponseReject :: Text -> SmsAeroResponse a

-- | SMSAero response to a send request.
data SendResponse

-- | Message accepted.
SendAccepted :: MessageId -> SendResponse

-- | No credits to send a message.
SendNoCredits :: SendResponse

-- | SMSAero response to a status request.
data StatusResponse

-- | Message is successfully delivered.
StatusDeliverySuccess :: StatusResponse

-- | Message delivery has failed.
StatusDeliveryFailure :: StatusResponse

-- | Message submitted to SMSC.
StatusSmscSubmit :: StatusResponse

-- | Message rejected by SMSC.
StatusSmscReject :: StatusResponse

-- | Message queued.
StatusQueue :: StatusResponse

-- | Wait for message status.
StatusWaitStatus :: StatusResponse

-- | SMSAero response to a balance request. This is a number of available
--   messages to send.
newtype BalanceResponse
BalanceResponse :: Double -> BalanceResponse

-- | SMSAero response to a senders request. This is just a list of
--   available signatures.
newtype SendersResponse
SendersResponse :: [Signature] -> SendersResponse

-- | SMSAero response to a sign request.
data SignResponse

-- | Signature is approved.
SignApproved :: SignResponse

-- | Signature is rejected.
SignRejected :: SignResponse

-- | Signature is pending.
SignPending :: SignResponse
instance GHC.Show.Show SMSAero.API.SignResponse
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.SendersResponse
instance GHC.Show.Show SMSAero.API.SendersResponse
instance GHC.Show.Show SMSAero.API.BalanceResponse
instance GHC.Show.Show SMSAero.API.StatusResponse
instance GHC.Show.Show SMSAero.API.SendResponse
instance GHC.Show.Show a => GHC.Show.Show (SMSAero.API.SmsAeroResponse a)
instance GHC.Show.Show SMSAero.API.SMSAeroDate
instance Servant.Common.Text.ToText SMSAero.API.Phone
instance GHC.Show.Show SMSAero.API.Phone
instance Servant.Common.Text.ToText SMSAero.API.MessageId
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.MessageId
instance GHC.Show.Show SMSAero.API.MessageId
instance Servant.Common.Text.ToText SMSAero.API.Signature
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.Signature
instance GHC.Show.Show SMSAero.API.Signature
instance Servant.API.ContentTypes.Accept SMSAero.API.SmsAeroJson
instance Data.Aeson.Types.Class.FromJSON a => Servant.API.ContentTypes.MimeUnrender SMSAero.API.SmsAeroJson a
instance (Servant.Client.HasClient sub, GHC.TypeLits.KnownSymbol sym, Servant.Common.Text.ToText a) => Servant.Client.HasClient (SMSAero.API.RequiredQueryParam sym a Servant.API.Sub.:> sub)
instance Servant.Common.Text.ToText SMSAero.API.SMSAeroDate
instance Servant.Client.HasClient sub => Servant.Client.HasClient (SMSAero.API.RequireAuth Servant.API.Sub.:> sub)
instance Servant.Client.HasClient sub => Servant.Client.HasClient (SMSAero.API.AnswerJson Servant.API.Sub.:> sub)
instance Data.Aeson.Types.Class.FromJSON a => Data.Aeson.Types.Class.FromJSON (SMSAero.API.SmsAeroResponse a)
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.SendResponse
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.StatusResponse
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.BalanceResponse
instance Data.Aeson.Types.Class.FromJSON SMSAero.API.SignResponse

module SMSAero.Client

-- | SMSAero client.
smsAeroClient :: Client SMSAeroAPI

-- | Common SMSAero client type.
type SmsAero a = EitherT ServantError IO (SmsAeroResponse a)

-- | Send a message.
smsAeroSend :: SMSAeroAuth -> Phone -> Text -> Signature -> Maybe SMSAeroDate -> SmsAero SendResponse

-- | Check status of a previously sent message.
smsAeroStatus :: SMSAeroAuth -> MessageId -> SmsAero StatusResponse

-- | Check balance.
smsAeroBalance :: SMSAeroAuth -> SmsAero BalanceResponse

-- | Check the list of available sender signatures.
smsAeroSenders :: SMSAeroAuth -> SmsAero SendersResponse

-- | Acquire a new signature.
smsAeroSign :: SMSAeroAuth -> SmsAero SignResponse

module SMSAero
